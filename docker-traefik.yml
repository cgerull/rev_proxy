---
    # Start a test suite in Docker swarm mode with resource limitations
    #
    version: "3.7"

    networks:
      web:
        driver: overlay
        external: true
        
    services:
        traefik:
            image: traefik:v2.1
            ports:
                - "80:80"
                - "8080:8080" # traefik dashboard
            command:
                - --api.insecure=true # set to 'false' on production
                - --api.dashboard=true # see https://docs.traefik.io/v2.0/operations/dashboard/#secure-mode for how to secure the dashboard
                - --api.debug=true # enable additional endpoints for debugging and profiling
                - --log.level=DEBUG # debug while we get it working, for more levels/info see https://docs.traefik.io/observability/logs/
                - --accesslog=true
                - --metrics.prometheus=true
                - --providers.docker=true
                - --providers.docker.swarmMode=true
                - --providers.docker.exposedbydefault=false
                - --providers.docker.network=web
                - --entrypoints.web.address=:80
            volumes:
                - /var/run/docker.sock:/var/run/docker.sock
            networks:
                - web
            deploy:
                replicas: 1
                placement:
                    constraints:
                    - node.role == manager
                labels:
                    - "traefik.enable=true"
                    - "traefik.http.routers.api.rule=Host(`localhost`)"
                    - "traefik.http.routers.api.service=api@internal" # Let the dashboard access the traefik api
                    - "traefik.http.services.api.loadbalancer.server.port=8080" # it seems you always need to give traefik a port so it 'notices' the service
